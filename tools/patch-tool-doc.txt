# Outil de patch GitHub ‚Äì patch-tools.js

## 1. Objectif g√©n√©ral
L‚Äôoutil **Patch Tool** permet d‚Äôappliquer des modifications automatis√©es sur des fichiers d‚Äôun d√©p√¥t GitHub. Il prend en entr√©e un **fichier JSON de patch** d√©crivant des changements (`replace`, `insert`, `delete`, etc.), v√©rifie des **pr√©conditions strictes**, et applique les changements soit en mode **Dry-run** (simulation), soit en mode **Apply** (√©criture r√©elle sur GitHub).

## 2. Fonctionnalit√©s principales
### 2.1 Dry-Run
- Simule le patch sans rien √©crire sur GitHub.
- T√©l√©charge chaque fichier cible.
- Applique virtuellement les op√©rations (replace, insert, delete...).
- G√©n√®re un **rapport d√©taill√©** dans le champ de sortie (`#patch-out`).
- Affiche les logs dans la console (avec niveaux INFO, WARN, ERROR).

### 2.2 Apply
- Identique au Dry-run, mais √©crit r√©ellement les fichiers sur GitHub.
- Envoie un commit par fichier via l‚ÄôAPI GitHub `PUT /contents/{path}`.
- Utilise un **committer** g√©n√©rique : `{ name: "Patch Tool", email: "noreply@example.com" }`.
- V√©rifie le SHA pour assurer un **verrouillage optimiste** (√©vite d‚Äô√©craser un fichier modifi√© depuis).

### 2.3 Op√©rations support√©es
| Type | Effet |
|------|--------|
| replace | Remplace la premi√®re occurrence d‚Äôun texte. |
| replace_all | Remplace toutes les occurrences. |
| replace_regex | Remplace via une expression r√©guli√®re. |
| insert_after_anchor | Ajoute des lignes apr√®s une ligne contenant une cha√Æne. |
| insert_before_anchor | Ajoute des lignes avant une ligne contenant une cha√Æne. |
| insert_after_line | Ajoute des lignes apr√®s une ligne correspondant √† un regex. |
| insert_before_line | Ajoute des lignes avant une ligne correspondant √† un regex. |
| delete_line | Supprime des lignes contenant un texte ou un regex. |

## 3. Format du patch JSON
Structure : 
```
{
  "changes": [
    {
      "path": "chemin/du/fichier.js",
      "pre": { ... },
      "ops": [ ... ],
      "message": "message optionnel"
    }
  ]
}
```

## 4. V√©rifications et pr√©conditions
- `expectSha` : SHA GitHub attendu.
- `expectSize` : taille du fichier.
- `expectHash` : hash SHA-256 attendu.
- `expectIncludes` : texte obligatoire dans le fichier.
- `strict` : si true, bloque sur √©cart ; sinon passe avec avertissement.

## 5. Aides int√©gr√©es
- Conversion UTF-8/Base64 propre (pr√©serve emojis).
- Console int√©gr√©e (`TV.log`).
- Protection contre les caract√®res ‚Äúsmart‚Äù (guillemets courbes, tirets, NBSP...).
- Normalisation automatique du texte JSON avant parsing.
- Hardening des textarea (d√©sactivation autocorrect, etc.).

## 6. Interface
- `#btn-patch-dryrun` : simulation.
- `#btn-patch-apply` : application r√©elle.
- `#patch-in` : zone JSON d‚Äôentr√©e.
- `#patch-out` : zone de sortie des logs.
- `üìÇ Load JSON file` : bouton pour importer un fichier .json local.

## 7. S√©curit√©
- V√©rrouillage SHA GitHub.
- Hash SHA-256 calcul√© c√¥t√© client.
- Gestion des erreurs via try/catch, `window.onerror`, et `unhandledrejection`.
- Logs d√©taill√©s pour chaque √©tape.

## 8. Int√©gration
Repose sur `TV` (fourni par app.js) : `ghBase`, `ghHeaders`, `log`.

## 9. Flux typique
1. Entrer owner/repo/branch/token.
2. Coller ou importer le JSON.
3. Lancer Dry-run.
4. V√©rifier le r√©sultat.
5. Lancer Apply.
6. Consulter la sortie et les logs.

## 10. Versions
| Version | Changements |
|----------|-------------|
| v8 | Base compl√®te du patch tool |
| v9 | Hardening et nettoyage iPad / smart punctuation |
| v10 | Ajout du bouton üìÇ Load JSON file |
